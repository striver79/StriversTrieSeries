class Node {
    Node[] links = new Node[26];
    boolean flag = false; 
    
    boolean containsKey(char ch) {
        return links[ch - 'a'] != null; 
    }
    Node get(char ch) {
        return links[ch-'a']; 
    }
    void put(char ch, Node node) {
        links[ch-'a'] = node; 
    }
    void setEnd() { 
        // a better name would have been markAsEnd();
        // since you aren't exactly setting the value with something
        // still kept the original name to be consistent with naming
        flag = true; 
    }
    boolean isEnd() {
        return flag; 
    }
}

class Trie {
    private Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node(); 
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node node = root;
        int wordLength = word.length();
        for(int i = 0;i<wordLength;i++) {
            char currChar = word.charAt(i);
            if(!node.containsKey(currChar)) {
                node.put(currChar, new Node()); 
            }
            node = node.get(currChar); 
        }
        node.setEnd(); 
    }
    public boolean checkIfAllPrefixExists(String word) {
        Node node = root;
        boolean flag = true; 
        int wordLength = word.length();
        for(int i = 0;i<wordLength && flag;i++) {
            char currChar = word.charAt(i);
            if(node.containsKey(currChar)) {
                node = node.get(currChar); 
                flag = flag & node.isEnd(); 
            }
            else {
                return false; 
            } 
        }
        return flag; 
    }
}

class Solution {

    static String completeString(int n, String[] a){
        Trie obj = new Trie();
        for(String word : a) obj.insert(word); 
        String longest = ""; 
        for(String word: a) {
            if(obj.checkIfAllPrefixExists(word)) {
                if(word.length() > longest.length()) {
                    longest = word; 
                }
                else if(word.length() == longest.length() && word.compareTo(longest) < 0) {
                    longest = word; 
                }
            }
        }
        if(longest.equals("")) return "None"; 
        return longest; 
    }
}
